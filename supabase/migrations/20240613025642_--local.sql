revoke delete on table "public"."answers" from "anon";

revoke insert on table "public"."answers" from "anon";

revoke references on table "public"."answers" from "anon";

revoke select on table "public"."answers" from "anon";

revoke trigger on table "public"."answers" from "anon";

revoke truncate on table "public"."answers" from "anon";

revoke update on table "public"."answers" from "anon";

revoke delete on table "public"."answers" from "authenticated";

revoke insert on table "public"."answers" from "authenticated";

revoke references on table "public"."answers" from "authenticated";

revoke select on table "public"."answers" from "authenticated";

revoke trigger on table "public"."answers" from "authenticated";

revoke truncate on table "public"."answers" from "authenticated";

revoke update on table "public"."answers" from "authenticated";

revoke delete on table "public"."answers" from "service_role";

revoke insert on table "public"."answers" from "service_role";

revoke references on table "public"."answers" from "service_role";

revoke select on table "public"."answers" from "service_role";

revoke trigger on table "public"."answers" from "service_role";

revoke truncate on table "public"."answers" from "service_role";

revoke update on table "public"."answers" from "service_role";

alter table "public"."answers" drop constraint "public_answers_quiz_fkey";

alter table "public"."answers" drop constraint "answers_pkey";

drop index if exists "public"."answers_pkey";

drop table "public"."answers";

create table "public"."gallery" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null default auth.uid(),
    "gallery" jsonb[]
);


alter table "public"."gallery" enable row level security;

create table "public"."items" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid default gen_random_uuid(),
    "src" text not null,
    "title" text not null
);


alter table "public"."items" enable row level security;

CREATE UNIQUE INDEX gallery_pkey ON public.gallery USING btree (id);

CREATE INDEX gallery_user_id_idx ON public.gallery USING btree (user_id);

CREATE UNIQUE INDEX gallery_user_id_key ON public.gallery USING btree (user_id);

CREATE UNIQUE INDEX items_pkey ON public.items USING btree (id);

alter table "public"."gallery" add constraint "gallery_pkey" PRIMARY KEY using index "gallery_pkey";

alter table "public"."items" add constraint "items_pkey" PRIMARY KEY using index "items_pkey";

alter table "public"."gallery" add constraint "gallery_user_id_key" UNIQUE using index "gallery_user_id_key";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user_gallery()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO 'public'
AS $function$BEGIN
  INSERT INTO public.gallery (user_id)
  VALUES (new.id);
  RETURN new;
END;$function$
;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO 'public'
AS $function$begin
  insert into public.profiles (id, first_name, last_name, email, metadata)
  values (new.id, new.raw_user_meta_data ->> 'first_name', new.raw_user_meta_data ->> 'last_name', new.email, new.raw_user_meta_data::jsonb);
  
  return new;
end;$function$
;

CREATE OR REPLACE FUNCTION public.handle_user_update()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO 'public'
AS $function$begin
  -- update the row in public.profiles
  update public.profiles
  set first_name = new.raw_user_meta_data ->> 'first_name',
  last_name = new.raw_user_meta_data ->> 'last_name',

  

      email = new.email,
      metadata = new.raw_user_meta_data::jsonb
  where id = new.id;

  -- if the row doesn't exist, insert a new row
  if not found then
    insert into public.profiles (id, first_name, last_name,  email, metadata)
    values (new.id, new.raw_user_meta_data ->> 'first_name', new.raw_user_meta_data ->> 'last_name', new.email, new.raw_user_meta_data::jsonb);
  end if;

  return new;
end;$function$
;

grant delete on table "public"."gallery" to "anon";

grant insert on table "public"."gallery" to "anon";

grant references on table "public"."gallery" to "anon";

grant select on table "public"."gallery" to "anon";

grant trigger on table "public"."gallery" to "anon";

grant truncate on table "public"."gallery" to "anon";

grant update on table "public"."gallery" to "anon";

grant delete on table "public"."gallery" to "authenticated";

grant insert on table "public"."gallery" to "authenticated";

grant references on table "public"."gallery" to "authenticated";

grant select on table "public"."gallery" to "authenticated";

grant trigger on table "public"."gallery" to "authenticated";

grant truncate on table "public"."gallery" to "authenticated";

grant update on table "public"."gallery" to "authenticated";

grant delete on table "public"."gallery" to "service_role";

grant insert on table "public"."gallery" to "service_role";

grant references on table "public"."gallery" to "service_role";

grant select on table "public"."gallery" to "service_role";

grant trigger on table "public"."gallery" to "service_role";

grant truncate on table "public"."gallery" to "service_role";

grant update on table "public"."gallery" to "service_role";

grant delete on table "public"."items" to "anon";

grant insert on table "public"."items" to "anon";

grant references on table "public"."items" to "anon";

grant select on table "public"."items" to "anon";

grant trigger on table "public"."items" to "anon";

grant truncate on table "public"."items" to "anon";

grant update on table "public"."items" to "anon";

grant delete on table "public"."items" to "authenticated";

grant insert on table "public"."items" to "authenticated";

grant references on table "public"."items" to "authenticated";

grant select on table "public"."items" to "authenticated";

grant trigger on table "public"."items" to "authenticated";

grant truncate on table "public"."items" to "authenticated";

grant update on table "public"."items" to "authenticated";

grant delete on table "public"."items" to "service_role";

grant insert on table "public"."items" to "service_role";

grant references on table "public"."items" to "service_role";

grant select on table "public"."items" to "service_role";

grant trigger on table "public"."items" to "service_role";

grant truncate on table "public"."items" to "service_role";

grant update on table "public"."items" to "service_role";

create policy "Enable insert for users based on user_id"
on "public"."gallery"
as permissive
for all
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for users based on user_id"
on "public"."items"
as permissive
for all
to public
using ((( SELECT auth.uid() AS uid) = user_id));



